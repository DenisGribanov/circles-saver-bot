// <auto-generated />
using System;
using Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Db.Migrations
{
    [DbContext(typeof(TgMediaFileSaverDbContext))]
    [Migration("20241027163922_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.InlineResultStatistics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<int>("ClickCount")
                        .HasColumnType("integer");

                    b.Property<long>("TgMediaFileId")
                        .HasColumnType("bigint");

                    b.Property<long>("TgUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TgMediaFileId");

                    b.HasIndex("TgUserId");

                    b.ToTable("InlineResultStatistics", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TgMediaFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUniqueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("HashTags")
                        .HasColumnType("text[]");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OwnerTgUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("VideoDuration")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerTgUserId");

                    b.HasIndex(new[] { "Id" }, "tg_media_file_id_index");

                    b.ToTable("TgMediaFile", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TgUser", b =>
                {
                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("ChatId")
                        .HasName("tg_user_pk");

                    b.HasIndex(new[] { "ChatId" }, "tg_user_chat_id_uindex")
                        .IsUnique();

                    b.ToTable("TgUser", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TelegramUpdate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserState")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("Domain.Entities.InlineResultStatistics", b =>
                {
                    b.HasOne("Domain.Entities.TgMediaFile", "TgMediaFile")
                        .WithMany("ClickStatistics")
                        .HasForeignKey("TgMediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("inline_result_statistics_tg_media_file_fk_id");

                    b.HasOne("Domain.Entities.TgUser", "TgUser")
                        .WithMany("PictureClickStatistics")
                        .HasForeignKey("TgUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("inline_result_statistics_tg_user_fk_id");

                    b.Navigation("TgMediaFile");

                    b.Navigation("TgUser");
                });

            modelBuilder.Entity("Domain.Entities.TgMediaFile", b =>
                {
                    b.HasOne("Domain.Entities.TgUser", "TgUserOwner")
                        .WithMany("Pictures")
                        .HasForeignKey("OwnerTgUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tg_media_file_tg_user_fk_id");

                    b.Navigation("TgUserOwner");
                });

            modelBuilder.Entity("Domain.Entities.TgMediaFile", b =>
                {
                    b.Navigation("ClickStatistics");
                });

            modelBuilder.Entity("Domain.Entities.TgUser", b =>
                {
                    b.Navigation("PictureClickStatistics");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
